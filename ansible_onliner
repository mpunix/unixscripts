shell: cat {{test_master }} | grep {{mount_point.split(('/)[1]"

replace:
  dest: "{{ ospic }}"
  regexp: '\s{{montpoing}} \s+'
  replace "{{mountpong}} {{fsmon_threshods}} {{current.stdout.split(' ') [2]"
  backup: yes
when fsmon_threshold is defined and current.rc== 0

shell: "ssh -oStrickthostkey=no -i {{private_key}} user@{{idrac}} < {{role_path}}/files/racadm

failed_when: bois.stdout.find('ERROR') != 1

when: bund.stout | replace ('\n', '') == "10"

when : |
   control_ver | match("\{1}\.\d{1})

when: playhosts is not defined or play_hosts | length !=1

shell: "test $(df -PK /var | tail -1 | awk '{print $(NF-2)@') -gt $(( {{ var_min_free_space}} * 1024 )) "

register: remove_dir  with_items:
                         - {{ remove_dir.files }}

hammer --output jason host list --search name == {{ ansible_fdqn}} --per-page 1
regiter: satellite_hosts_status

set_fact:
 satellite_host_json: "{{satellite_host_status.stdout | from_jason | first | default ([]) }}"


when: satelite_host_jason['operating system']['subscription_status'] == 0


host_type: {{ facter_virtual }}
fs_host_type: {{ 'rootvg' if host_type == 'physical' else 'infravg' }}

when: removed_autosys | succeeded

failed_when: rpm_check.rc == 0

state: path={{backupfiles.stdout_lines[-1] }}

timestamp: {{ session_id | default('{{ ansible_date_time.epoch}} ' }}"

assert: 
that: auto_entry.stdout_lines | length == 0 or auto_entry.stdout_lines | length == 1

-name:
 command: umont {{ point }}
 register: umount
 retries: 3
 delay: 1
 ignore_errors: true
 until: umount.rc == 0
 when: is_mounted.rc == 0


all:vars]
ansible_ssh_private_key_file=/etc/ansible
ansible_ssh_extra_args=-R3128:host:3128

when:ansible_mounts | selectattr('mount','match', '^/oracle') | map(attribute='fstype') |list ==[]

roles:
- { role: oracle_db_api_agent, action: deploy }

curl -D -u <username:password> -X POST  --data@<path to the jason file> -H "content-Type: applicatoin/jason"
https://jira/api/2/issue

{
"fields": {
  "project": {
      "key": "ENG"
},

- name: name lookup
  set_fact:
    site: "{{lookup('filter', 'asset' , '{{ ansible_hostname}}','site' }}"
